import tkinter as tk
from collections import deque

# This is the module where all the variables, classes, etc. that need to be shared across modules live.
# This is primarily for organizational reasons, though it also solves a few issues with circular imports.

# MISCELLANEOUS VARIABLES
do_slow_activation = None  # Becomes a tkinter IntVar at runtime
data = 0
score = 0

# CARD RARITY COEFFICIENTS
# These are used when opening booster packs to weight the card draw.
r_common = 10
r_uncommon = 5
r_rare = 3
r_legendary = 1
# Keep in mind that the "true" rarity of any type is equal to the rarity coefficient times the number of cards of that
# rarity. So if you don't make many legendary cards, they will be getting hit twice.

# CARDHOLDERS
class CardHolder:
    def __init__(self, max_length=-1, gui_frame=None):
        self.list = []  # In theory, would be better to have CardHolder inherit from list
        self.max_length = max_length
        self.active_index = -1

        self.gui_frame = gui_frame

# Set up our cardholders, which are just the places that cards go
deck = CardHolder()
active_row = CardHolder(max_length=6)
particle_row = CardHolder()
power_row = CardHolder(max_length=5)

# EVENT STACK STUFF
class StackEvent:
    # The things that go on the event stack. Generally, these are generated by cards/tokens when they are activated.
    def __init__(self, origin, function, f_args, tags=None):
        """
        Constructor.

        Args:
            origin: The object (usually a card/token) that the StackEvent came from.
            function: The function associated with the StackEvent. The main interpreter will execute this.
            f_args: Arguments to be passed to the function.
            tags: Currently unused.
        """

        self.origin = origin
        self.function = function
        self.f_args = f_args
        self.tags = tags

stack = deque([])  # Deque that contains all the StackEvents

# INTERPRETER STUFF
class Interpreter:
    # Interpreters are objects that process StackEvents. There is one main interpreter that executes card/token
    # functions and some number of additional interpreters that implement passive effects. Anything that needs to modify
    # a stack event or be triggered by a stack event is handled by Interpreters.
    def __init__(self, function, f_args=None):
        """
        Constructor.

        Args:
            function: The function the interpreter will execute. Must always take the event as the first argument.
            f_args: If the function needs any additional args, put them here. Not implemented right now.
        """
        self.function = function

# Deque that contains the interpreters. StackEvents are processed by each interpreter, starting with the top (most
# recently appended) and continuing down the deque until it hits the main interpreter that executes the StackEvent's
# function. This is always the final interpreter.
# Thus, main interpreter must go on first. Append additional ones afterwards.
interpreters = deque([])

# Main interpreter, executes the function listed on the card/token
def f_main_interpreter(event):
    event.function(*event.f_args)
main_interpreter = Interpreter(f_main_interpreter)

interpreters.append(main_interpreter)
